@using System.Globalization
@using BazaarCompanionWeb.Components.Pages.Dialogs.Components
@using BazaarCompanionWeb.Components.Pages.Components
@using BazaarCompanionWeb.Utilities
@using Humanizer

<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Left">
    <RadzenText Text="@Product.ItemFriendlyName" TextStyle="TextStyle.DisplayH5" TextAlign="TextAlign.Center" class="rz-mb-0"/>
    @if (_loading)
    {
        <div class="rz-mx-12 rz-my-4">
            <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Secondary" Value="100" ShowValue="false"
                               Mode="ProgressBarMode.Indeterminate"/>
        </div>
    }
    else
    {
        if (Product.PriceHistory is not null && Product.PriceHistory.Count is not 0)
        {
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center"
                         Wrap="FlexWrap.Wrap">
                <ValueCard Variant="Variant.Outlined" Title="Tier" Value="@Product.ItemTier.Humanize()"
                           ValueStyle="@($"color: {Product.ItemTier.ProductTierColor()}")"/>
                <ValueCard Variant="Variant.Outlined" Title="Profit Multi." Value="@($"{Product.OrderMetaPotentialProfitMultiplier:N2}x")"
                           ValueStyle="@($"color: {Product.OrderMetaPotentialProfitMultiplier.MultiplierColor()}")"/>
                <ValueCard Variant="Variant.Outlined" Title="Flip Rating"
                           Value="@(Product.OrderMetaFlipOpportunityScore.ToString("N2"))"
                           ValueStyle="@($"color: {Product.OrderMetaFlipOpportunityScore.RatingColor()}")"/>
                <ValueCard Variant="Variant.Outlined" Title="Total Week Vol." Value="@Product.OrderMetaTotalWeekVolume.ToString("N0")"/>
                <ValueCard Variant="Variant.Outlined" Title="Buy Week Vol." Value="@Product.BuyOrderWeekVolume.ToString("N0")"/>
                <ValueCard Variant="Variant.Outlined" Title="Sell Week Vol." Value="@Product.SellOrderWeekVolume.ToString("N0")"/>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center"
                         Wrap="FlexWrap.Wrap">
                @{ var history = GetLastPriceHistoryAverage(); }
                <StatCard @ref="_buyRef" Title="Ask" Value="@(Product.BuyOrderUnitPrice ?? double.MaxValue)"
                          ReferenceValue="@history.Buy"/>
                <StatCard @ref="_spreadRef" Title="Spread" Value="@(Product.OrderMetaMargin)"
                          ReferenceValue="@(history.Buy - history.Sell)"/>
                <StatCard @ref="_sellRef" Title="Bid" Value="@(Product.SellOrderUnitPrice ?? 0.1)" Inverse="true"
                          ReferenceValue="@history.Sell"/>
            </RadzenStack>
            <PriceGraph Product="Product"/>
        }

        @if (Product.BuyBook is not null && Product.SellBook is not null)
        {
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Start">
                    <RadzenText Text="Ask Order Depth" TextStyle="TextStyle.H4" TextAlign="TextAlign.Center" class="rz-mb-0"/>
                    <RadzenTable Style="height:250px" class="rz-density-compact rz-selectable">
                        <RadzenTableHeader>
                            <RadzenTableHeaderRow>
                                <RadzenTableHeaderCell>Market Price</RadzenTableHeaderCell>
                                <RadzenTableHeaderCell>Orders (@Product.BuyBook.Sum(x => x.Orders).ToString("N0"))</RadzenTableHeaderCell>
                                <RadzenTableHeaderCell>Quantity (@Product.BuyBook.Sum(x => x.Amount).ToString("N0"))</RadzenTableHeaderCell>
                            </RadzenTableHeaderRow>
                        </RadzenTableHeader>
                        <RadzenTableBody>
                            @foreach (var order in Product.BuyBook)
                            {
                                <RadzenTableRow>
                                    <RadzenTableCell>@order.UnitPrice.ToString("C2", CultureInfo.CreateSpecificCulture("en-US"))</RadzenTableCell>
                                    <RadzenTableCell>@order.Orders.ToString("N0")</RadzenTableCell>
                                    <RadzenTableCell>@order.Amount.ToString("N0")</RadzenTableCell>
                                </RadzenTableRow>
                            }
                        </RadzenTableBody>
                    </RadzenTable>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Start">
                    <RadzenText Text="Bid Order Depth" TextStyle="TextStyle.H4" TextAlign="TextAlign.Center" class="rz-mb-0"/>
                    <RadzenTable Style="height:250px" class="rz-density-compact rz-selectable">
                        <RadzenTableHeader>
                            <RadzenTableHeaderRow>
                                <RadzenTableHeaderCell>Market Price</RadzenTableHeaderCell>
                                <RadzenTableHeaderCell>Orders (@Product.SellBook.Sum(x => x.Orders).ToString("N0"))</RadzenTableHeaderCell>
                                <RadzenTableHeaderCell>Quantity (@Product.SellBook.Sum(x => x.Amount).ToString("N0"))
                                </RadzenTableHeaderCell>
                            </RadzenTableHeaderRow>
                        </RadzenTableHeader>
                        <RadzenTableBody>
                            @foreach (var order in Product.SellBook)
                            {
                                <RadzenTableRow>
                                    <RadzenTableCell>@order.UnitPrice.ToString("C2", CultureInfo.CreateSpecificCulture("en-US"))</RadzenTableCell>
                                    <RadzenTableCell>@order.Orders.ToString("N0")</RadzenTableCell>
                                    <RadzenTableCell>@order.Amount.ToString("N0")</RadzenTableCell>
                                </RadzenTableRow>
                            }
                        </RadzenTableBody>
                    </RadzenTable>
                </RadzenStack>
            </RadzenStack>
        }

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenText Text="The percentage change is computed based on a 12-hour EMA" TextAlign="TextAlign.Right"
                        TextStyle="TextStyle.Overline" class="rz-mb-0 rz-ml-4"/>
            <RadzenText TextAlign="TextAlign.Right" TextStyle="TextStyle.Overline" class="rz-mb-0 rz-mr-4">
                Last Updated @(_lastServerRefresh?.Humanize() ?? "Loading...")
            </RadzenText>
        </RadzenStack>
    }
</RadzenStack>
